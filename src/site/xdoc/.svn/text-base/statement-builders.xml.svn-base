<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2012 The MyBatis Team

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- version: $Id$ -->

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis 3 | Statement Builders</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
  </properties>

  <body>
  <section name="Statement Builders">
  <subsection name="SelectBuilder">
  <p>One of the nastiest things a Java developer will ever have to do is embed SQL in Java code. &#xa0;Usually this is done because the SQL has to be dynamically generated &#x2013; otherwise you could externalize it in a file or a stored proc. &#xa0;As you&#x2019;ve already seen, MyBatis has a powerful answer for dynamic SQL generation in its XML mapping features. &#xa0;However, sometimes it becomes necessary to build a SQL statement string inside of Java code. &#xa0;In that case, MyBatis has one more feature to help you out, before reducing yourself to the typical mess of plus signs, quotes, newlines, formatting problems and nested conditionals to deal with extra commas or AND conjunctions&#x2026; Indeed, dynamically generating SQL code in Java can be a real nightmare.</p>
    <p>MyBatis 3 introduces a somewhat different concept to deal with the problem. &#xa0;We could have just created an instance of a class that lets you call methods against it to build a SQL statement one step at a time. &#xa0;But then our SQL ends up looking more like Java and less like SQL. &#xa0;Instead, we&#x2019;re trying something a little different. &#xa0;The end result is about as close to a Domain Specific Language that Java will ever achieve in its current form&#x2026;</p>
    <p><strong>The Secrets of SelectBuilder</strong></p>
    <p>The SelectBuilder class is not magical, nor does it do any of us any good if you don&#x2019;t know how it works. &#xa0;So right off the bat, let&#x2019;s look at what it does. &#xa0;SelectBuilder uses a combination of Static Imports and a ThreadLocal variable to enable a clean syntax that can be easily interlaced with conditionals and takes care of all of the SQL formatting for you. &#xa0;It allows us to create methods like this:</p>
<source><![CDATA[public String selectBlogsSql() {
  BEGIN(); // Clears ThreadLocal variable
  SELECT("*");
  FROM("BLOG");
  return SQL();
}]]></source>  
    <p>That&#x2019;s a pretty simple example that you might just choose to build statically. &#xa0;So here&#x2019;s a more complicated example:</p>
<source><![CDATA[private String selectPersonSql() {
  BEGIN(); // Clears ThreadLocal variable
  SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");
  SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");
  FROM("PERSON P");
  FROM("ACCOUNT A");
  INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");
  INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");
  WHERE("P.ID = A.ID");
  WHERE("P.FIRST_NAME like ?");
  OR();
  WHERE("P.LAST_NAME like ?");
  GROUP_BY("P.ID");
  HAVING("P.LAST_NAME like ?");
  OR();
  HAVING("P.FIRST_NAME like ?");
  ORDER_BY("P.ID");
  ORDER_BY("P.FULL_NAME");
  return SQL();
}]]></source>  
    <p>Building the above SQL would be a bit of a trial in String concatenation. &#xa0;For example:</p>
<source><![CDATA["SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, "
"P.LAST_NAME,P.CREATED_ON, P.UPDATED_ON " +
"FROM PERSON P, ACCOUNT A " +
"INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID " +
"INNER JOIN COMPANY C on D.COMPANY_ID = C.ID " +
"WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) " +
"OR (P.LAST_NAME like ?) " +
"GROUP BY P.ID " +
"HAVING (P.LAST_NAME like ?) " +
"OR (P.FIRST_NAME like ?) " +
"ORDER BY P.ID, P.FULL_NAME";]]></source>  
    <p>If you prefer that syntax, then you&#x2019;re still welcome to use it. &#xa0;It is quite error prone though. &#xa0;Notice the careful addition of a space at the end of each line. &#xa0; Now even if you do prefer that syntax, the next example is inarguably far simpler than Java String concatenation:</p>
<source><![CDATA[private String selectPersonLike(Person p){
  BEGIN(); // Clears ThreadLocal variable
  SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME");
  FROM("PERSON P");
  if (p.id != null) {
  WHERE("P.ID like #{id}");
  }
  if (p.firstName != null) {
  WHERE("P.FIRST_NAME like #{firstName}");
  }
  if (p.lastName != null) {
  WHERE("P.LAST_NAME like #{lastName}");
  }
  ORDER_BY("P.LAST_NAME");
  return SQL();
}]]></source>  
    <p>What is so special about that example? &#xa0;Well, if you look closely, it doesn&#x2019;t have to worry about accidentally duplicating &#x201c;AND&#x201d; keywords, or choosing between &#x201c;WHERE&#x201d; and &#x201c;AND&#x201d; or neither! &#xa0;The statement above will generate a query by example for all PERSON records, ones with ID like the parameter, or the firstName like the parameter, or the lastName like the parameter &#x2013;or any combination of the three. The SelectBuilder takes care of understanding where &#x201c;WHERE&#x201d; needs to go, where an &#x201c;AND&#x201d; should be used and all of the String concatenation. &#xa0;Best of all, it does it almost regardless of which order you call these methods in (there&#x2019;s only one exception with the OR() method).</p>
    <p>The two methods that may catch your eye are: &#xa0;BEGIN() and SQL(). &#xa0;In a nutshell, every SelectBuilder method should start with a call to BEGIN() and end with a call to SQL(). &#xa0;Of course you can extract methods in the middle to break up your logic, but the scope of the SQL generation should always begin with BEGIN() and end with SQL(). &#xa0;The BEGIN() method clears the ThreadLocal variable, to make sure you don&#x2019;t accidentally carry any state forward, and the SQL() method assembles your SQL statement based on the calls you made since the last call to BEGIN(). &#xa0;Note that BEGIN() has a synonym called RESET(), which does exactly the same thing but reads better in certain contexts.</p>
    <p>To use the SelectBuilder as in the examples above, you simply need to import it statically as follows:</p>
<source>import static org.apache.ibatis.jdbc.SelectBuilder.*;</source>
    <p>Once this is imported, the class you&#x2019;re working within will have all of the SelectBuilder methods available to it. &#xa0;The complete set of methods is as follows:</p>
    <table>
    <thead>
    <tr><th><p>Method</p></th><th><p>Description</p></th></tr></thead>
    <tbody>
  <tr>
    <td>
      <code>BEGIN()</code> / <code>RESET()</code>
    </td>
    <td>These methods clear the ThreadLocal state of the SelectBuilder class, and prepare it for a new statement to be
        built. <code>BEGIN()</code> reads best when starting a new statement. <code>RESET()</code> reads best when clearing a
        statement in the middle of execution for some reason (perhaps if the logic demands a completely different
        statement under some conditions).</td>
  </tr>
  <tr>
    <td>
      <code>SELECT(String)</code>
    </td>
    <td>Starts or appends to a <code>SELECT</code> clause. &#xa0;Can be called more than once, and parameters will be appended to
        the <code>SELECT</code> clause. &#xa0;The parameters are usually a comma separated list of columns and aliases, but can be
        anything acceptable to the driver.</td>
  </tr>
  <tr>
    <td>
      <code>SELECT_DISTINCT(String)</code>
    </td>
    <td>Starts or appends to a <code>SELECT</code> clause, also adds the <code>DISTINCT</code> keyword to the generated query.
        &#xa0;Can be called more than once, and parameters will be appended to the <code>SELECT</code> clause. &#xa0;The parameters
        are usually a comma separated list of columns and aliases, but can be anything acceptable to the driver.</td>
  </tr>
  <tr>
    <td>
      <code>FROM(String)</code>
    </td>
    <td>Starts or appends to a <code>FROM</code> clause. &#xa0;Can be called more than once, and parameters will be appended to the
        <code>FROM</code> clause. Parameters are usually a table name and an alias, or anything acceptable to the driver.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li><code>JOIN(String)</code></li>
        <li><code>INNER_JOIN(String)</code></li>
        <li><code>LEFT_OUTER_JOIN(String)</code></li>
        <li><code>RIGHT_OUTER_JOIN(String)</code></li>
      </ul>
    </td>
    <td>Adds a new <code>JOIN</code> clause of the appropriate type, depending on the method called. &#xa0;The parameter can include
        a standard join consisting of the columns and the conditions to join on. &#xa0;</td>
  </tr>
  <tr>
    <td>
      <code>WHERE(String)</code>
    </td>
    <td>Appends a new <code>WHERE</code> clause condition, concatenated by <code>AND</code>. &#xa0;Can be called multiple times, which causes it
        to concatenate the new conditions each time with <code>AND</code>. &#xa0;Use <code>OR()</code> to split with an <code>OR</code>.</td>
  </tr>
  <tr>
    <td>
      <code>OR()</code>
    </td>
    <td>Splits the current <code>WHERE</code> clause conditions with an <code>OR</code>. &#xa0;Can be called more than once, but calling more
        than once in a row will generate erratic <code>SQL</code>. &#xa0;</td>
  </tr>
  <tr>
    <td>
      <code>AND()</code>
    </td>
    <td>Splits the current <code>WHERE</code> clause conditions with an <code>AND</code>. &#xa0;Can be called more than once, but calling more
        than once in a row will generate erratic <code>SQL</code>. &#xa0;Because <code>WHERE</code> and <code>HAVING</code> both automatically concatenate with
        <code>AND</code>, this is a very uncommon method to use and is only really included for completeness.</td>
  </tr>
  <tr>
    <td>
      <code>GROUP_BY(String)</code>
    </td>
    <td>Appends a new <code>GROUP BY</code> clause elements, concatenated by a comma. &#xa0;Can be called multiple times, which
        causes it to concatenate the new conditions each time with a comma.
    </td>
  </tr>
  <tr>
    <td>
      <code>HAVING(String)</code>
    </td>
    <td>Appends a new <code>HAVING</code> clause condition, concatenated by AND. &#xa0;Can be called multiple times, which causes it
        to concatenate the new conditions each time with <code>AND</code>. &#xa0;Use <code>OR()</code> to split with an <code>OR</code>.</td>
  </tr>
  <tr>
    <td>
      <code>ORDER_BY(String)</code>
    </td>
    <td>Appends a new <code>ORDER BY</code> clause elements, concatenated by a comma. &#xa0;Can be called multiple times, which
        causes it to concatenate the new conditions each time with a comma.</td>
  </tr>
  <tr>
    <td>
      <code>SQL()</code>
    </td>
    <td>This returns the generated <code>SQL()</code> and resets the <code>SelectBuilder</code> state (as if
    <code>BEGIN()</code> or <code>RESET()</code> were called).
        &#xa0;Thus, this method can only be called ONCE!</td>
  </tr>
    </tbody></table>
    </subsection>

    <subsection name="SqlBuilder">
    <p>Similarly to SelectBuilder, MyBatis also includes a generalized SqlBuilder. It includes all the methods for SelectBuilder, as well as methods for building inserts, updates, and deletes. &#xa0;This class can be useful when building SQL strings in a DeleteProvider, InsertProvider, or UpdateProvider (as well as a SelectProvider). &#xa0;</p>
    <p>To use the SqlBuilder as in the examples above, you simply need to import it statically as follows:</p>
    <source>import static org.apache.ibatis.jdbc.SqlBuilder.*;</source>
    <p>SqlBuilder contains all methods from SelectBuilder, as well as these additional methods:</p>
      <table>
      <thead>
      <tr><th>Method</th><th>Description</th></tr>
      </thead>
      <tbody>
      <tr>
  <td>
    <code>DELETE_FROM(String)</code>
  </td>
  <td>Starts a delete statement and specifies the table to delete from. &#xa0;Generally this should be followed by a
      WHERE statement!
  </td>
</tr>
  <tr>
    <td>
      <code>INSERT_INTO(String)</code>
    </td>
    <td>Starts an insert statement and specifies the table to insert into. &#xa0;This should be followed by one or more
        VALUES() calls.
    </td>
  </tr>
  <tr>
    <td>
      <code>SET(String)</code>
    </td>
    <td>Appends to the &#x201c;set&#x201d; list for an update statement.</td>
  </tr>
  <tr>
    <td>
      <code>UPDATE(String)</code>
    </td>
    <td>Starts an update statement and specifies the table to update. &#xa0;This should be followed by one or more
        SET() calls, and usually a WHERE() call.</td>
  </tr>
  <tr>
    <td>
      <code>VALUES(String, String)</code>
    </td>
    <td>Appends to an insert statement. &#xa0;The first parameter is the column(s) to insert, the second parameter is
        the value(s).</td>
  </tr>
      </tbody>
    </table>

    <p>Here are some examples:</p>

<source><![CDATA[public String deletePersonSql() {
  BEGIN(); // Clears ThreadLocal variable
  DELETE_FROM("PERSON");
  WHERE("ID = ${id}");
  return SQL();
}

public String insertPersonSql() {
  BEGIN(); // Clears ThreadLocal variable
  INSERT_INTO("PERSON");
  VALUES("ID, FIRST_NAME", "${id}, ${firstName}");
  VALUES("LAST_NAME", "${lastName}");
  return SQL();
}

public String updatePersonSql() {
  BEGIN(); // Clears ThreadLocal variable
  UPDATE("PERSON");
  SET("FIRST_NAME = ${firstName}");
  WHERE("ID = ${id}");
  return SQL();
}]]></source>  
  </subsection>
  </section>
  </body>

</document>
